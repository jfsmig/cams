// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hub.proto

#include "hub.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cams {
namespace api {
namespace hub {
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_CONSTEXPR StreamId::StreamId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIdDefaultTypeInternal() {}
  union {
    StreamId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIdDefaultTypeInternal _StreamId_default_instance_;
PROTOBUF_CONSTEXPR None::None(
    ::_pbi::ConstantInitialized) {}
struct NoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoneDefaultTypeInternal() {}
  union {
    None _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoneDefaultTypeInternal _None_default_instance_;
PROTOBUF_CONSTEXPR DownstreamControlRequest::DownstreamControlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.streamid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownstreamControlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownstreamControlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownstreamControlRequestDefaultTypeInternal() {}
  union {
    DownstreamControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownstreamControlRequestDefaultTypeInternal _DownstreamControlRequest_default_instance_;
PROTOBUF_CONSTEXPR DownstreamMediaFrame::DownstreamMediaFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownstreamMediaFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownstreamMediaFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownstreamMediaFrameDefaultTypeInternal() {}
  union {
    DownstreamMediaFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownstreamMediaFrameDefaultTypeInternal _DownstreamMediaFrame_default_instance_;
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
PROTOBUF_CONSTEXPR PlayRequest::PlayRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayRequestDefaultTypeInternal() {}
  union {
    PlayRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayRequestDefaultTypeInternal _PlayRequest_default_instance_;
PROTOBUF_CONSTEXPR PauseRequest::PauseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PauseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseRequestDefaultTypeInternal() {}
  union {
    PauseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseRequestDefaultTypeInternal _PauseRequest_default_instance_;
}  // namespace hub
}  // namespace api
}  // namespace cams
static ::_pb::Metadata file_level_metadata_hub_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_hub_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_hub_2eproto = nullptr;

const uint32_t TableStruct_hub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::Status, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::Status, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::StreamId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::StreamId, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::StreamId, _impl_.stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::None, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::DownstreamControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::DownstreamControlRequest, _impl_.streamid_),
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::DownstreamControlRequest, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::DownstreamMediaFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::DownstreamMediaFrame, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::DownstreamMediaFrame, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::RegisterRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::PlayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::PlayRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::PauseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cams::api::hub::PauseRequest, _impl_.id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cams::api::hub::Status)},
  { 8, -1, -1, sizeof(::cams::api::hub::StreamId)},
  { 16, -1, -1, sizeof(::cams::api::hub::None)},
  { 22, -1, -1, sizeof(::cams::api::hub::DownstreamControlRequest)},
  { 30, -1, -1, sizeof(::cams::api::hub::DownstreamMediaFrame)},
  { 38, -1, -1, sizeof(::cams::api::hub::RegisterRequest)},
  { 45, -1, -1, sizeof(::cams::api::hub::PlayRequest)},
  { 52, -1, -1, sizeof(::cams::api::hub::PauseRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cams::api::hub::_Status_default_instance_._instance,
  &::cams::api::hub::_StreamId_default_instance_._instance,
  &::cams::api::hub::_None_default_instance_._instance,
  &::cams::api::hub::_DownstreamControlRequest_default_instance_._instance,
  &::cams::api::hub::_DownstreamMediaFrame_default_instance_._instance,
  &::cams::api::hub::_RegisterRequest_default_instance_._instance,
  &::cams::api::hub::_PlayRequest_default_instance_._instance,
  &::cams::api::hub::_PauseRequest_default_instance_._instance,
};

const char descriptor_table_protodef_hub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\thub.proto\022\014cams.api.hub\"&\n\006Status\022\014\n\004c"
  "ode\030\001 \001(\r\022\016\n\006status\030\002 \001(\t\"(\n\010StreamId\022\014\n"
  "\004user\030\001 \001(\t\022\016\n\006stream\030\002 \001(\t\"\006\n\004None\"b\n\030D"
  "ownstreamControlRequest\022\020\n\010streamID\030\001 \001("
  "\t\0224\n\007command\030\002 \001(\0162#.cams.api.hub.Downst"
  "reamCommandType\"]\n\024DownstreamMediaFrame\022"
  "4\n\004type\030\002 \001(\0162&.cams.api.hub.DownstreamM"
  "ediaFrameType\022\017\n\007payload\030\003 \001(\014\"5\n\017Regist"
  "erRequest\022\"\n\002id\030\001 \001(\0132\026.cams.api.hub.Str"
  "eamId\"1\n\013PlayRequest\022\"\n\002id\030\001 \001(\0132\026.cams."
  "api.hub.StreamId\"2\n\014PauseRequest\022\"\n\002id\030\001"
  " \001(\0132\026.cams.api.hub.StreamId*\204\001\n\025Downstr"
  "eamCommandType\022\'\n#DOWNSTREAM_COMMAND_TYP"
  "E_UNSPECIFIED\020\000\022 \n\034DOWNSTREAM_COMMAND_TY"
  "PE_PLAY\020\001\022 \n\034DOWNSTREAM_COMMAND_TYPE_STO"
  "P\020\002*\267\001\n\030DownstreamMediaFrameType\022+\n\'DOWN"
  "STREAM_MEDIA_FRAME_TYPE_UNSPECIFIED\020\000\022#\n"
  "\037DOWNSTREAM_MEDIA_FRAME_TYPE_RTP\020\001\022$\n DO"
  "WNSTREAM_MEDIA_FRAME_TYPE_RTCP\020\002\022#\n\037DOWN"
  "STREAM_MEDIA_FRAME_TYPE_SDP\020\0032Y\n\nControl"
  "ler\022K\n\007Control\022\022.cams.api.hub.None\032&.cam"
  "s.api.hub.DownstreamControlRequest\"\000(\0010\001"
  "2U\n\010Uploader\022I\n\013MediaUpload\022\".cams.api.h"
  "ub.DownstreamMediaFrame\032\022.cams.api.hub.N"
  "one\"\000(\0012L\n\tRegistrar\022\?\n\010Register\022\035.cams."
  "api.hub.RegisterRequest\032\022.cams.api.hub.N"
  "one\"\0002|\n\006Viewer\0227\n\004Play\022\031.cams.api.hub.P"
  "layRequest\032\022.cams.api.hub.None\"\000\0229\n\005Paus"
  "e\022\032.cams.api.hub.PauseRequest\032\022.cams.api"
  ".hub.None\"\000B\016Z\014../api/pb;pbb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_hub_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hub_2eproto = {
    false, false, 1195, descriptor_table_protodef_hub_2eproto,
    "hub.proto",
    &descriptor_table_hub_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_hub_2eproto::offsets,
    file_level_metadata_hub_2eproto, file_level_enum_descriptors_hub_2eproto,
    file_level_service_descriptors_hub_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hub_2eproto_getter() {
  return &descriptor_table_hub_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hub_2eproto(&descriptor_table_hub_2eproto);
namespace cams {
namespace api {
namespace hub {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownstreamCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hub_2eproto);
  return file_level_enum_descriptors_hub_2eproto[0];
}
bool DownstreamCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownstreamMediaFrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hub_2eproto);
  return file_level_enum_descriptors_hub_2eproto[1];
}
bool DownstreamMediaFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.Status)
}

inline void Status::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.code_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:cams.api.hub.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.Status)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cams.api.hub.Status.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Status::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.Status)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cams.api.hub.Status.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.Status)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.Status)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[0]);
}

// ===================================================================

class StreamId::_Internal {
 public:
};

StreamId::StreamId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.StreamId)
}
StreamId::StreamId(const StreamId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.stream_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream().empty()) {
    _this->_impl_.stream_.Set(from._internal_stream(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.StreamId)
}

inline void StreamId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.stream_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamId::~StreamId() {
  // @@protoc_insertion_point(destructor:cams.api.hub.StreamId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  _impl_.stream_.Destroy();
}

void StreamId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamId::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.StreamId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _impl_.stream_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cams.api.hub.StreamId.user"));
        } else
          goto handle_unusual;
        continue;
      // string stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cams.api.hub.StreamId.stream"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.StreamId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cams.api.hub.StreamId.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string stream = 2;
  if (!this->_internal_stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cams.api.hub.StreamId.stream");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.StreamId)
  return target;
}

size_t StreamId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.StreamId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string stream = 2;
  if (!this->_internal_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamId::GetClassData() const { return &_class_data_; }


void StreamId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamId*>(&to_msg);
  auto& from = static_cast<const StreamId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.StreamId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_stream().empty()) {
    _this->_internal_set_stream(from._internal_stream());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamId::CopyFrom(const StreamId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.StreamId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamId::IsInitialized() const {
  return true;
}

void StreamId::InternalSwap(StreamId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_, lhs_arena,
      &other->_impl_.stream_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[1]);
}

// ===================================================================

class None::_Internal {
 public:
};

None::None(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.None)
}
None::None(const None& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  None* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.None)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData None::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*None::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata None::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[2]);
}

// ===================================================================

class DownstreamControlRequest::_Internal {
 public:
};

DownstreamControlRequest::DownstreamControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.DownstreamControlRequest)
}
DownstreamControlRequest::DownstreamControlRequest(const DownstreamControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownstreamControlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.streamid_){}
    , decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.streamid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_streamid().empty()) {
    _this->_impl_.streamid_.Set(from._internal_streamid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.command_ = from._impl_.command_;
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.DownstreamControlRequest)
}

inline void DownstreamControlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.streamid_){}
    , decltype(_impl_.command_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.streamid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.streamid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DownstreamControlRequest::~DownstreamControlRequest() {
  // @@protoc_insertion_point(destructor:cams.api.hub.DownstreamControlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownstreamControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.streamid_.Destroy();
}

void DownstreamControlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownstreamControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.DownstreamControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.streamid_.ClearToEmpty();
  _impl_.command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownstreamControlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string streamID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_streamid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cams.api.hub.DownstreamControlRequest.streamID"));
        } else
          goto handle_unusual;
        continue;
      // .cams.api.hub.DownstreamCommandType command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::cams::api::hub::DownstreamCommandType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownstreamControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.DownstreamControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string streamID = 1;
  if (!this->_internal_streamid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamid().data(), static_cast<int>(this->_internal_streamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cams.api.hub.DownstreamControlRequest.streamID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_streamid(), target);
  }

  // .cams.api.hub.DownstreamCommandType command = 2;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.DownstreamControlRequest)
  return target;
}

size_t DownstreamControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.DownstreamControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string streamID = 1;
  if (!this->_internal_streamid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamid());
  }

  // .cams.api.hub.DownstreamCommandType command = 2;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownstreamControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownstreamControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownstreamControlRequest::GetClassData() const { return &_class_data_; }


void DownstreamControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownstreamControlRequest*>(&to_msg);
  auto& from = static_cast<const DownstreamControlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.DownstreamControlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_streamid().empty()) {
    _this->_internal_set_streamid(from._internal_streamid());
  }
  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownstreamControlRequest::CopyFrom(const DownstreamControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.DownstreamControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownstreamControlRequest::IsInitialized() const {
  return true;
}

void DownstreamControlRequest::InternalSwap(DownstreamControlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.streamid_, lhs_arena,
      &other->_impl_.streamid_, rhs_arena
  );
  swap(_impl_.command_, other->_impl_.command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownstreamControlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[3]);
}

// ===================================================================

class DownstreamMediaFrame::_Internal {
 public:
};

DownstreamMediaFrame::DownstreamMediaFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.DownstreamMediaFrame)
}
DownstreamMediaFrame::DownstreamMediaFrame(const DownstreamMediaFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownstreamMediaFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.DownstreamMediaFrame)
}

inline void DownstreamMediaFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DownstreamMediaFrame::~DownstreamMediaFrame() {
  // @@protoc_insertion_point(destructor:cams.api.hub.DownstreamMediaFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownstreamMediaFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void DownstreamMediaFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownstreamMediaFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.DownstreamMediaFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownstreamMediaFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cams.api.hub.DownstreamMediaFrameType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::cams::api::hub::DownstreamMediaFrameType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownstreamMediaFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.DownstreamMediaFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cams.api.hub.DownstreamMediaFrameType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.DownstreamMediaFrame)
  return target;
}

size_t DownstreamMediaFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.DownstreamMediaFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .cams.api.hub.DownstreamMediaFrameType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownstreamMediaFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownstreamMediaFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownstreamMediaFrame::GetClassData() const { return &_class_data_; }


void DownstreamMediaFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownstreamMediaFrame*>(&to_msg);
  auto& from = static_cast<const DownstreamMediaFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.DownstreamMediaFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownstreamMediaFrame::CopyFrom(const DownstreamMediaFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.DownstreamMediaFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownstreamMediaFrame::IsInitialized() const {
  return true;
}

void DownstreamMediaFrame::InternalSwap(DownstreamMediaFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownstreamMediaFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[4]);
}

// ===================================================================

class RegisterRequest::_Internal {
 public:
  static const ::cams::api::hub::StreamId& id(const RegisterRequest* msg);
};

const ::cams::api::hub::StreamId&
RegisterRequest::_Internal::id(const RegisterRequest* msg) {
  return *msg->_impl_.id_;
}
RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::cams::api::hub::StreamId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.RegisterRequest)
}

inline void RegisterRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:cams.api.hub.RegisterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
}

void RegisterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cams.api.hub.StreamId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cams.api.hub.StreamId id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cams.api.hub.StreamId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }


void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::cams::api::hub::StreamId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[5]);
}

// ===================================================================

class PlayRequest::_Internal {
 public:
  static const ::cams::api::hub::StreamId& id(const PlayRequest* msg);
};

const ::cams::api::hub::StreamId&
PlayRequest::_Internal::id(const PlayRequest* msg) {
  return *msg->_impl_.id_;
}
PlayRequest::PlayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.PlayRequest)
}
PlayRequest::PlayRequest(const PlayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::cams::api::hub::StreamId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.PlayRequest)
}

inline void PlayRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayRequest::~PlayRequest() {
  // @@protoc_insertion_point(destructor:cams.api.hub.PlayRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
}

void PlayRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.PlayRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cams.api.hub.StreamId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.PlayRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cams.api.hub.StreamId id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.PlayRequest)
  return target;
}

size_t PlayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.PlayRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cams.api.hub.StreamId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayRequest::GetClassData() const { return &_class_data_; }


void PlayRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayRequest*>(&to_msg);
  auto& from = static_cast<const PlayRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.PlayRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::cams::api::hub::StreamId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayRequest::CopyFrom(const PlayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.PlayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayRequest::IsInitialized() const {
  return true;
}

void PlayRequest::InternalSwap(PlayRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[6]);
}

// ===================================================================

class PauseRequest::_Internal {
 public:
  static const ::cams::api::hub::StreamId& id(const PauseRequest* msg);
};

const ::cams::api::hub::StreamId&
PauseRequest::_Internal::id(const PauseRequest* msg) {
  return *msg->_impl_.id_;
}
PauseRequest::PauseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cams.api.hub.PauseRequest)
}
PauseRequest::PauseRequest(const PauseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PauseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::cams::api::hub::StreamId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:cams.api.hub.PauseRequest)
}

inline void PauseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PauseRequest::~PauseRequest() {
  // @@protoc_insertion_point(destructor:cams.api.hub.PauseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PauseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
}

void PauseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PauseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cams.api.hub.PauseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cams.api.hub.StreamId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PauseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cams.api.hub.PauseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cams.api.hub.StreamId id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cams.api.hub.PauseRequest)
  return target;
}

size_t PauseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cams.api.hub.PauseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cams.api.hub.StreamId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PauseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PauseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PauseRequest::GetClassData() const { return &_class_data_; }


void PauseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PauseRequest*>(&to_msg);
  auto& from = static_cast<const PauseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cams.api.hub.PauseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::cams::api::hub::StreamId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PauseRequest::CopyFrom(const PauseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cams.api.hub.PauseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseRequest::IsInitialized() const {
  return true;
}

void PauseRequest::InternalSwap(PauseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hub_2eproto_getter, &descriptor_table_hub_2eproto_once,
      file_level_metadata_hub_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hub
}  // namespace api
}  // namespace cams
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cams::api::hub::Status*
Arena::CreateMaybeMessage< ::cams::api::hub::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::StreamId*
Arena::CreateMaybeMessage< ::cams::api::hub::StreamId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::StreamId >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::None*
Arena::CreateMaybeMessage< ::cams::api::hub::None >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::None >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::DownstreamControlRequest*
Arena::CreateMaybeMessage< ::cams::api::hub::DownstreamControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::DownstreamControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::DownstreamMediaFrame*
Arena::CreateMaybeMessage< ::cams::api::hub::DownstreamMediaFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::DownstreamMediaFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::RegisterRequest*
Arena::CreateMaybeMessage< ::cams::api::hub::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::PlayRequest*
Arena::CreateMaybeMessage< ::cams::api::hub::PlayRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::PlayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cams::api::hub::PauseRequest*
Arena::CreateMaybeMessage< ::cams::api::hub::PauseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cams::api::hub::PauseRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
