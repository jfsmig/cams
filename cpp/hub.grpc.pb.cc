// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hub.proto

#include "hub.pb.h"
#include "hub.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cams {
namespace api {
namespace hub {

static const char* Downstream_method_names[] = {
  "/cams.api.hub.Downstream/Control",
  "/cams.api.hub.Downstream/MediaUpload",
};

std::unique_ptr< Downstream::Stub> Downstream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Downstream::Stub> stub(new Downstream::Stub(channel, options));
  return stub;
}

Downstream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Control_(Downstream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_MediaUpload_(Downstream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>* Downstream::Stub::ControlRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>::Create(channel_.get(), rpcmethod_Control_, context);
}

void Downstream::Stub::async::Control(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::cams::api::hub::None,::cams::api::hub::DownstreamControlRequest>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::cams::api::hub::None,::cams::api::hub::DownstreamControlRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Control_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>* Downstream::Stub::AsyncControlRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>::Create(channel_.get(), cq, rpcmethod_Control_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>* Downstream::Stub::PrepareAsyncControlRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>::Create(channel_.get(), cq, rpcmethod_Control_, context, false, nullptr);
}

::grpc::ClientWriter< ::cams::api::hub::DownstreamMediaFrame>* Downstream::Stub::MediaUploadRaw(::grpc::ClientContext* context, ::cams::api::hub::None* response) {
  return ::grpc::internal::ClientWriterFactory< ::cams::api::hub::DownstreamMediaFrame>::Create(channel_.get(), rpcmethod_MediaUpload_, context, response);
}

void Downstream::Stub::async::MediaUpload(::grpc::ClientContext* context, ::cams::api::hub::None* response, ::grpc::ClientWriteReactor< ::cams::api::hub::DownstreamMediaFrame>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::cams::api::hub::DownstreamMediaFrame>::Create(stub_->channel_.get(), stub_->rpcmethod_MediaUpload_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::cams::api::hub::DownstreamMediaFrame>* Downstream::Stub::AsyncMediaUploadRaw(::grpc::ClientContext* context, ::cams::api::hub::None* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::cams::api::hub::DownstreamMediaFrame>::Create(channel_.get(), cq, rpcmethod_MediaUpload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::cams::api::hub::DownstreamMediaFrame>* Downstream::Stub::PrepareAsyncMediaUploadRaw(::grpc::ClientContext* context, ::cams::api::hub::None* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::cams::api::hub::DownstreamMediaFrame>::Create(channel_.get(), cq, rpcmethod_MediaUpload_, context, response, false, nullptr);
}

Downstream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Downstream_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Downstream::Service, ::cams::api::hub::None, ::cams::api::hub::DownstreamControlRequest>(
          [](Downstream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::cams::api::hub::DownstreamControlRequest,
             ::cams::api::hub::None>* stream) {
               return service->Control(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Downstream_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Downstream::Service, ::cams::api::hub::DownstreamMediaFrame, ::cams::api::hub::None>(
          [](Downstream::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::cams::api::hub::DownstreamMediaFrame>* reader,
             ::cams::api::hub::None* resp) {
               return service->MediaUpload(ctx, reader, resp);
             }, this)));
}

Downstream::Service::~Service() {
}

::grpc::Status Downstream::Service::Control(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::cams::api::hub::DownstreamControlRequest, ::cams::api::hub::None>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Downstream::Service::MediaUpload(::grpc::ServerContext* context, ::grpc::ServerReader< ::cams::api::hub::DownstreamMediaFrame>* reader, ::cams::api::hub::None* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Registrar_method_names[] = {
  "/cams.api.hub.Registrar/Register",
};

std::unique_ptr< Registrar::Stub> Registrar::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Registrar::Stub> stub(new Registrar::Stub(channel, options));
  return stub;
}

Registrar::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(Registrar_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Registrar::Stub::Register(::grpc::ClientContext* context, const ::cams::api::hub::RegisterRequest& request, ::cams::api::hub::None* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cams::api::hub::RegisterRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void Registrar::Stub::async::Register(::grpc::ClientContext* context, const ::cams::api::hub::RegisterRequest* request, ::cams::api::hub::None* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cams::api::hub::RegisterRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void Registrar::Stub::async::Register(::grpc::ClientContext* context, const ::cams::api::hub::RegisterRequest* request, ::cams::api::hub::None* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cams::api::hub::None>* Registrar::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::cams::api::hub::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cams::api::hub::None, ::cams::api::hub::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cams::api::hub::None>* Registrar::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::cams::api::hub::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

Registrar::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Registrar_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Registrar::Service, ::cams::api::hub::RegisterRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Registrar::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cams::api::hub::RegisterRequest* req,
             ::cams::api::hub::None* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
}

Registrar::Service::~Service() {
}

::grpc::Status Registrar::Service::Register(::grpc::ServerContext* context, const ::cams::api::hub::RegisterRequest* request, ::cams::api::hub::None* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Viewer_method_names[] = {
  "/cams.api.hub.Viewer/Play",
  "/cams.api.hub.Viewer/Pause",
};

std::unique_ptr< Viewer::Stub> Viewer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Viewer::Stub> stub(new Viewer::Stub(channel, options));
  return stub;
}

Viewer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Play_(Viewer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(Viewer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Viewer::Stub::Play(::grpc::ClientContext* context, const ::cams::api::hub::PlayRequest& request, ::cams::api::hub::None* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cams::api::hub::PlayRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Play_, context, request, response);
}

void Viewer::Stub::async::Play(::grpc::ClientContext* context, const ::cams::api::hub::PlayRequest* request, ::cams::api::hub::None* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cams::api::hub::PlayRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Viewer::Stub::async::Play(::grpc::ClientContext* context, const ::cams::api::hub::PlayRequest* request, ::cams::api::hub::None* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cams::api::hub::None>* Viewer::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::cams::api::hub::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cams::api::hub::None, ::cams::api::hub::PlayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Play_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cams::api::hub::None>* Viewer::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::cams::api::hub::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Viewer::Stub::Pause(::grpc::ClientContext* context, const ::cams::api::hub::PauseRequest& request, ::cams::api::hub::None* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cams::api::hub::PauseRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void Viewer::Stub::async::Pause(::grpc::ClientContext* context, const ::cams::api::hub::PauseRequest* request, ::cams::api::hub::None* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cams::api::hub::PauseRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Viewer::Stub::async::Pause(::grpc::ClientContext* context, const ::cams::api::hub::PauseRequest* request, ::cams::api::hub::None* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cams::api::hub::None>* Viewer::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::cams::api::hub::PauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cams::api::hub::None, ::cams::api::hub::PauseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cams::api::hub::None>* Viewer::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::cams::api::hub::PauseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

Viewer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Viewer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Viewer::Service, ::cams::api::hub::PlayRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Viewer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cams::api::hub::PlayRequest* req,
             ::cams::api::hub::None* resp) {
               return service->Play(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Viewer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Viewer::Service, ::cams::api::hub::PauseRequest, ::cams::api::hub::None, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Viewer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cams::api::hub::PauseRequest* req,
             ::cams::api::hub::None* resp) {
               return service->Pause(ctx, req, resp);
             }, this)));
}

Viewer::Service::~Service() {
}

::grpc::Status Viewer::Service::Play(::grpc::ServerContext* context, const ::cams::api::hub::PlayRequest* request, ::cams::api::hub::None* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Viewer::Service::Pause(::grpc::ServerContext* context, const ::cams::api::hub::PauseRequest* request, ::cams::api::hub::None* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cams
}  // namespace api
}  // namespace hub

