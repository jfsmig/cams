// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: wiy.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistrarClient is the client API for Registrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrarClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type registrarClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrarClient(cc grpc.ClientConnInterface) RegistrarClient {
	return &registrarClient{cc}
}

func (c *registrarClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/wiy.proto.Registrar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrarServer is the server API for Registrar service.
// All implementations must embed UnimplementedRegistrarServer
// for forward compatibility
type RegistrarServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	mustEmbedUnimplementedRegistrarServer()
}

// UnimplementedRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrarServer struct {
}

func (UnimplementedRegistrarServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistrarServer) mustEmbedUnimplementedRegistrarServer() {}

// UnsafeRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrarServer will
// result in compilation errors.
type UnsafeRegistrarServer interface {
	mustEmbedUnimplementedRegistrarServer()
}

func RegisterRegistrarServer(s grpc.ServiceRegistrar, srv RegistrarServer) {
	s.RegisterService(&Registrar_ServiceDesc, srv)
}

func _Registrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wiy.proto.Registrar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registrar_ServiceDesc is the grpc.ServiceDesc for Registrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiy.proto.Registrar",
	HandlerType: (*RegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registrar_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wiy.proto",
}

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorClient interface {
	Play(ctx context.Context, opts ...grpc.CallOption) (Collector_PlayClient, error)
	Pause(ctx context.Context, opts ...grpc.CallOption) (Collector_PauseClient, error)
}

type collectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorClient(cc grpc.ClientConnInterface) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) Play(ctx context.Context, opts ...grpc.CallOption) (Collector_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[0], "/wiy.proto.Collector/Play", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorPlayClient{stream}
	return x, nil
}

type Collector_PlayClient interface {
	Send(*PlayRequest) error
	Recv() (*PlayReply, error)
	grpc.ClientStream
}

type collectorPlayClient struct {
	grpc.ClientStream
}

func (x *collectorPlayClient) Send(m *PlayRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorPlayClient) Recv() (*PlayReply, error) {
	m := new(PlayReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) Pause(ctx context.Context, opts ...grpc.CallOption) (Collector_PauseClient, error) {
	stream, err := c.cc.NewStream(ctx, &Collector_ServiceDesc.Streams[1], "/wiy.proto.Collector/Pause", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorPauseClient{stream}
	return x, nil
}

type Collector_PauseClient interface {
	Send(*PauseRequest) error
	Recv() (*PauseReply, error)
	grpc.ClientStream
}

type collectorPauseClient struct {
	grpc.ClientStream
}

func (x *collectorPauseClient) Send(m *PauseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorPauseClient) Recv() (*PauseReply, error) {
	m := new(PauseReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
// All implementations must embed UnimplementedCollectorServer
// for forward compatibility
type CollectorServer interface {
	Play(Collector_PlayServer) error
	Pause(Collector_PauseServer) error
	mustEmbedUnimplementedCollectorServer()
}

// UnimplementedCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (UnimplementedCollectorServer) Play(Collector_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedCollectorServer) Pause(Collector_PauseServer) error {
	return status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedCollectorServer) mustEmbedUnimplementedCollectorServer() {}

// UnsafeCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServer will
// result in compilation errors.
type UnsafeCollectorServer interface {
	mustEmbedUnimplementedCollectorServer()
}

func RegisterCollectorServer(s grpc.ServiceRegistrar, srv CollectorServer) {
	s.RegisterService(&Collector_ServiceDesc, srv)
}

func _Collector_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).Play(&collectorPlayServer{stream})
}

type Collector_PlayServer interface {
	Send(*PlayReply) error
	Recv() (*PlayRequest, error)
	grpc.ServerStream
}

type collectorPlayServer struct {
	grpc.ServerStream
}

func (x *collectorPlayServer) Send(m *PlayReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorPlayServer) Recv() (*PlayRequest, error) {
	m := new(PlayRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Collector_Pause_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).Pause(&collectorPauseServer{stream})
}

type Collector_PauseServer interface {
	Send(*PauseReply) error
	Recv() (*PauseRequest, error)
	grpc.ServerStream
}

type collectorPauseServer struct {
	grpc.ServerStream
}

func (x *collectorPauseServer) Send(m *PauseReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorPauseServer) Recv() (*PauseRequest, error) {
	m := new(PauseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Collector_ServiceDesc is the grpc.ServiceDesc for Collector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wiy.proto.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _Collector_Play_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pause",
			Handler:       _Collector_Pause_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wiy.proto",
}
