syntax = "proto3";

option go_package = ".;proto";

package cams.proto;

// The service used for authentication and provisioning
service Registrar {
  rpc Register(RegisterRequest) returns (RegisterReply) {}
}

// The service dedicated to the agents
service Controller {
  // Stream of commands from the server to the client
  rpc Control(stream ControlReply) returns (stream ControlRequest) {}
  // Stream of media frames from the client to the server
  rpc MediaUpload(stream MediaFrame) returns (MediaReply) {}
}

service Consumer {
  rpc Play(StreamId) returns (stream MediaFrame) {}
}

message Status {
  uint32 code = 1;
  string status = 2;
}

message MediaFrame {
  bytes payload = 1;
  MediaBanner banner = 2;
}

message MediaReply {
  StreamId id = 1;
  Status status = 2;
}

message MediaBanner {
  string user = 1;
  string stream = 2;
  string token = 3;
}

message RegisterRequest {
  StreamId id = 1;
}

message RegisterReply {
  Status status = 1;
}

message StreamId {
  string user = 1;
  string stream = 2;
}

message ControlReply {
  RtspPlayNotify playing = 1;
}

message ControlRequest {
  RtspPlay play = 1;
  RtspPause pause = 2;
  RtspTeardown teardown = 3;
}

message RtspPlayNotify {
  string streamID = 1;
}

message RtspPlay {
  string streamID = 1;
}

message RtspPause {
  string streamID = 1;
}

message RtspTeardown {
  string streamID = 1;
}
