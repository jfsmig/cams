// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: hub.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistrarClient is the client API for Registrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrarClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type registrarClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrarClient(cc grpc.ClientConnInterface) RegistrarClient {
	return &registrarClient{cc}
}

func (c *registrarClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/cams.proto.Registrar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrarServer is the server API for Registrar service.
// All implementations must embed UnimplementedRegistrarServer
// for forward compatibility
type RegistrarServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	mustEmbedUnimplementedRegistrarServer()
}

// UnimplementedRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrarServer struct {
}

func (UnimplementedRegistrarServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistrarServer) mustEmbedUnimplementedRegistrarServer() {}

// UnsafeRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrarServer will
// result in compilation errors.
type UnsafeRegistrarServer interface {
	mustEmbedUnimplementedRegistrarServer()
}

func RegisterRegistrarServer(s grpc.ServiceRegistrar, srv RegistrarServer) {
	s.RegisterService(&Registrar_ServiceDesc, srv)
}

func _Registrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cams.proto.Registrar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registrar_ServiceDesc is the grpc.ServiceDesc for Registrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cams.proto.Registrar",
	HandlerType: (*RegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registrar_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub.proto",
}

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	// Stream of commands from the server to the client
	Control(ctx context.Context, opts ...grpc.CallOption) (Controller_ControlClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Control(ctx context.Context, opts ...grpc.CallOption) (Controller_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], "/cams.proto.Controller/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerControlClient{stream}
	return x, nil
}

type Controller_ControlClient interface {
	Send(*ControlReply) error
	Recv() (*ControlRequest, error)
	grpc.ClientStream
}

type controllerControlClient struct {
	grpc.ClientStream
}

func (x *controllerControlClient) Send(m *ControlReply) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerControlClient) Recv() (*ControlRequest, error) {
	m := new(ControlRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	// Stream of commands from the server to the client
	Control(Controller_ControlServer) error
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Control(Controller_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).Control(&controllerControlServer{stream})
}

type Controller_ControlServer interface {
	Send(*ControlRequest) error
	Recv() (*ControlReply, error)
	grpc.ServerStream
}

type controllerControlServer struct {
	grpc.ServerStream
}

func (x *controllerControlServer) Send(m *ControlRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerControlServer) Recv() (*ControlReply, error) {
	m := new(ControlReply)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cams.proto.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _Controller_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub.proto",
}

// StreamPlayerClient is the client API for StreamPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamPlayerClient interface {
	Media(ctx context.Context, opts ...grpc.CallOption) (StreamPlayer_MediaClient, error)
}

type streamPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamPlayerClient(cc grpc.ClientConnInterface) StreamPlayerClient {
	return &streamPlayerClient{cc}
}

func (c *streamPlayerClient) Media(ctx context.Context, opts ...grpc.CallOption) (StreamPlayer_MediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamPlayer_ServiceDesc.Streams[0], "/cams.proto.StreamPlayer/Media", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamPlayerMediaClient{stream}
	return x, nil
}

type StreamPlayer_MediaClient interface {
	Send(*MediaFrame) error
	CloseAndRecv() (*MediaReply, error)
	grpc.ClientStream
}

type streamPlayerMediaClient struct {
	grpc.ClientStream
}

func (x *streamPlayerMediaClient) Send(m *MediaFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamPlayerMediaClient) CloseAndRecv() (*MediaReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MediaReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamPlayerServer is the server API for StreamPlayer service.
// All implementations must embed UnimplementedStreamPlayerServer
// for forward compatibility
type StreamPlayerServer interface {
	Media(StreamPlayer_MediaServer) error
	mustEmbedUnimplementedStreamPlayerServer()
}

// UnimplementedStreamPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamPlayerServer struct {
}

func (UnimplementedStreamPlayerServer) Media(StreamPlayer_MediaServer) error {
	return status.Errorf(codes.Unimplemented, "method Media not implemented")
}
func (UnimplementedStreamPlayerServer) mustEmbedUnimplementedStreamPlayerServer() {}

// UnsafeStreamPlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamPlayerServer will
// result in compilation errors.
type UnsafeStreamPlayerServer interface {
	mustEmbedUnimplementedStreamPlayerServer()
}

func RegisterStreamPlayerServer(s grpc.ServiceRegistrar, srv StreamPlayerServer) {
	s.RegisterService(&StreamPlayer_ServiceDesc, srv)
}

func _StreamPlayer_Media_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamPlayerServer).Media(&streamPlayerMediaServer{stream})
}

type StreamPlayer_MediaServer interface {
	SendAndClose(*MediaReply) error
	Recv() (*MediaFrame, error)
	grpc.ServerStream
}

type streamPlayerMediaServer struct {
	grpc.ServerStream
}

func (x *streamPlayerMediaServer) SendAndClose(m *MediaReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamPlayerMediaServer) Recv() (*MediaFrame, error) {
	m := new(MediaFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamPlayer_ServiceDesc is the grpc.ServiceDesc for StreamPlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamPlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cams.proto.StreamPlayer",
	HandlerType: (*StreamPlayerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Media",
			Handler:       _StreamPlayer_Media_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "hub.proto",
}
