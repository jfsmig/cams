// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: controller.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	// Stream of commands from the server to the client
	Control(ctx context.Context, opts ...grpc.CallOption) (Controller_ControlClient, error)
	// Stream of media frames from the client to the server
	// There should be at most one long-standing call to MediaUpload per agent connected
	// to the cloud.
	MediaUpload(ctx context.Context, opts ...grpc.CallOption) (Controller_MediaUploadClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Control(ctx context.Context, opts ...grpc.CallOption) (Controller_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], "/cams.api.hub.Controller/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerControlClient{stream}
	return x, nil
}

type Controller_ControlClient interface {
	Send(*ControlReply) error
	Recv() (*ControlRequest, error)
	grpc.ClientStream
}

type controllerControlClient struct {
	grpc.ClientStream
}

func (x *controllerControlClient) Send(m *ControlReply) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerControlClient) Recv() (*ControlRequest, error) {
	m := new(ControlRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) MediaUpload(ctx context.Context, opts ...grpc.CallOption) (Controller_MediaUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[1], "/cams.api.hub.Controller/MediaUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerMediaUploadClient{stream}
	return x, nil
}

type Controller_MediaUploadClient interface {
	Send(*MediaFrame) error
	CloseAndRecv() (*None, error)
	grpc.ClientStream
}

type controllerMediaUploadClient struct {
	grpc.ClientStream
}

func (x *controllerMediaUploadClient) Send(m *MediaFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerMediaUploadClient) CloseAndRecv() (*None, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(None)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	// Stream of commands from the server to the client
	Control(Controller_ControlServer) error
	// Stream of media frames from the client to the server
	// There should be at most one long-standing call to MediaUpload per agent connected
	// to the cloud.
	MediaUpload(Controller_MediaUploadServer) error
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Control(Controller_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedControllerServer) MediaUpload(Controller_MediaUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method MediaUpload not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).Control(&controllerControlServer{stream})
}

type Controller_ControlServer interface {
	Send(*ControlRequest) error
	Recv() (*ControlReply, error)
	grpc.ServerStream
}

type controllerControlServer struct {
	grpc.ServerStream
}

func (x *controllerControlServer) Send(m *ControlRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerControlServer) Recv() (*ControlReply, error) {
	m := new(ControlReply)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Controller_MediaUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).MediaUpload(&controllerMediaUploadServer{stream})
}

type Controller_MediaUploadServer interface {
	SendAndClose(*None) error
	Recv() (*MediaFrame, error)
	grpc.ServerStream
}

type controllerMediaUploadServer struct {
	grpc.ServerStream
}

func (x *controllerMediaUploadServer) SendAndClose(m *None) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerMediaUploadServer) Recv() (*MediaFrame, error) {
	m := new(MediaFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cams.api.hub.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _Controller_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MediaUpload",
			Handler:       _Controller_MediaUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "controller.proto",
}
