syntax = "proto3";

option go_package = "../api/pb;pb";

package cams.api.hub;

message Status {
  uint32 code = 1;
  string status = 2;
}

message StreamId {
  string user = 1;
  string stream = 2;
}

message None {}

// The service dedicated to the agents
// It is all about controlling media streams
service Controller {
  // Stream of commands from the server to the client
  rpc Control(stream None) returns (stream DownstreamControlRequest) {}
}

enum DownstreamCommandType {
    DOWNSTREAM_COMMAND_TYPE_UNSPECIFIED = 0;
    DOWNSTREAM_COMMAND_TYPE_PLAY = 1;
    DOWNSTREAM_COMMAND_TYPE_STOP = 2;
}

// What should be done
message DownstreamControlRequest {
  string streamID = 1;
  DownstreamCommandType command = 2;
}


// The service dedicated to the agents 
// It is all about their cameras producing media frames
service Uploader {
  // Stream of media frames from the client to the server
  // There should be at most one long-standing call to MediaUpload per agent connected
  // to the cloud.
  rpc MediaUpload(stream DownstreamMediaFrame) returns (None) {}
}

enum DownstreamMediaFrameType {
  DOWNSTREAM_MEDIA_FRAME_TYPE_UNSPECIFIED = 0;
  DOWNSTREAM_MEDIA_FRAME_TYPE_RTP = 1;
  DOWNSTREAM_MEDIA_FRAME_TYPE_RTCP = 2;
  DOWNSTREAM_MEDIA_FRAME_TYPE_SDP = 3;
}

message DownstreamMediaFrame {
  DownstreamMediaFrameType type = 2;
  bytes payload = 3;
}

// The service is dedicated to the agents
// It is used for authentication and registration of their cameras
service Registrar {
  rpc Register(RegisterRequest) returns (None) {}
}

message RegisterRequest {
  StreamId id = 1;
}

// The service is dedicated to admins
// It pilots the agents on the field from the cloud
service Viewer {
  rpc Play(PlayRequest) returns (None) {}
  rpc Pause(PauseRequest) returns (None) {}
}

message PlayRequest {
  StreamId id = 1;
}

message PauseRequest {
  StreamId id = 1;
}
